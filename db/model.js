// Generated by CoffeeScript 1.7.1
(function() {
  var Model, add_timestamp, db, get_timestamp,
    __slice = [].slice;

  db = require("db");

  get_timestamp = function() {
    var now;
    now = new Date();
    return new Date(now.getTime() + (now.getTimezoneOffset()));
  };

  add_timestamp = function(obj) {
    var ts;
    ts = get_timestamp();
    obj.created_at = ts;
    obj.updated_at = ts;
    return obj;
  };

  Model = (function() {
    Model.table = "";

    Model.timestamp = false;

    Model.primary_key = "id";

    function Model() {
      this._primary_key = this.constructor.primary_keys();
      this._table = this.constructor.table;
      this._timestamp = this.constructor.timestamp;
    }

    Model.primary_keys = function() {
      if ("string" === typeof this.primary_key) {
        return [this.primary_key];
      } else {
        return this.primary_key;
      }
    };

    Model.load_all = function(rows) {
      var i, row, _results;
      _results = [];
      for (i in rows) {
        row = rows[i];
        _results.push(this.load(row));
      }
      return _results;
    };

    Model.load = function(row) {
      var k, obj, v;
      obj = new this();
      for (k in row) {
        v = row[k];
        obj[k] = v;
      }
      return obj;
    };

    Model.encode_key = function() {
      var args, i;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      args = args[0];
      return ((function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = args.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push("" + (db.escape_name(this.primary_keys()[i])) + " = " + (db.escape_var(args[i])));
        }
        return _results;
      }).call(this)).join(" and ");
    };

    Model.find = function() {
      var args, k, r, v, where;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      where = "";
      if (Array.isArray(args && "object" !== typeof args[0])) {
        where = this.encode_key(args);
      } else {
        where = ((function() {
          var _ref, _results;
          _ref = args[0];
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            _results.push("" + (db.escape_name(k)) + " = " + (db.escape_var(v)));
          }
          return _results;
        })()).join(" and ");
      }
      r = db.select("* FROM " + (db.escape_name(this.table)) + " WHERE " + where + " LIMIT 1");
      return r.then((function(_this) {
        return function(result) {
          if (result.rowCount > 0) {
            return _this.load(result.rows[0]);
          }
        };
      })(this));
    };

    Model.find_all = function(keys, by_key) {
      var r, v;
      if (by_key == null) {
        by_key = this.primary_key;
      }
      keys = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          v = keys[_i];
          _results.push(db.escape_var(v));
        }
        return _results;
      })();
      r = db.select("* FROM " + (db.escape_name(this.table)) + " WHERE " + by_key + " in (" + (keys.join(", ")) + ")");
      return r.then((function(_this) {
        return function(result) {
          if (result.rowCount > 0) {
            return _this.load_all(result.rows);
          }
        };
      })(this));
    };

    Model.select = function(conditions, fields) {
      var condition, k, q, r, v;
      q = ["* FROM " + (db.escape_name(this.table))];
      if (conditions) {
        condition = ((function() {
          var _results;
          _results = [];
          for (k in conditions) {
            v = conditions[k];
            _results.push("" + (db.escape_name(k)) + " = " + (db.escape_var(v)));
          }
          return _results;
        })()).join(" and ");
        q.push("WHERE " + condition);
      }
      r = db.select(q.join(""));
      return r.then((function(_this) {
        return function(result) {
          if (result.rowCount > 0) {
            return _this.load_all(result.rows);
          }
        };
      })(this));
    };

    Model.create = function(info) {
      var r;
      if (this.timestamp) {
        info = add_timestamp(info);
      }
      r = db.insert(this.table, info, this.primary_keys());
      return r.then((function(_this) {
        return function(result) {
          return _this.load(_this.find(result.rows[0]));
        };
      })(this));
    };

    Model.prototype["delete"] = function() {
      var conditions, k, _i, _len, _ref;
      conditions = {};
      _ref = this._primary_key;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        conditions[k] = this[k];
      }
      return db["delete"](this._table, conditions);
    };

    Model.prototype.update = function() {
      var args, conditions, first, k, values, _i, _j, _len, _len1, _ref;
      first = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      conditions = {};
      values = {};
      _ref = this._primary_key;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        conditions[k] = this[k];
      }
      if ("string" === typeof first) {
        args.push(first);
        for (_j = 0, _len1 = args.length; _j < _len1; _j++) {
          k = args[_j];
          values[k] = this[k];
        }
      } else {
        values = first;
      }
      if (this._timestamp) {
        values.updated_at = get_timestamp();
      }
      return db.update(this._table, values, conditions);
    };

    return Model;

  })();

  module.exports = Model;

}).call(this);
